from scipy.io import wavfile
samplerate, data = wavfile.read('.outputaudio.wav')

from scipy.io.wavfile import write
samplerate = 44100;
t = np.linspace(0., 1., samplerate)
amplitude = np.iinfo(np.int16).max
data = amplitude*np.sin(y)
write("example.wav", samplerate, data.astype(np.int16))

read and write in (read for input write for output)

import librosa
audio_path = 'audio-path'
x , sr = librosa.load(audio_path, sr=44100)
print(type(x), type(sr))

%matplotlib inline
import matplotlib.pyplot as plt
import librosa.display
plt.figure(figsize=(14, 5))
librosa.display.waveshow(x, sr=sr)
plt.show()

#display Spectrogram
X = librosa.stft(x)
Xdb = librosa.amplitude_to_db(abs(X))
plt.figure(figsize=(14, 5))
librosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz') 
plt.colorbar()
plt.show()

mfccs = librosa.feature.mfcc(y=x,sr=sr)
#displayed with specshow
plt.figure(figsize=(14, 5))
librosa.display.specshow(mfccs, sr=sr, x_axis='time')
plt.show()

backtojigglyaudio
x,sr=librosa.load('audio')
mfccs = librosa.feature.mfcc(y=x,sr=sr)
wave = librosa.feature.inverse.mfcc_to_audio(mfccs)
from scipy.io.wavfile import write
amplitude = np.iinfo(np.int16).max
data = amplitude.np.sin(wave*np.pi*2)
write('example.wav',sr,data.astype(np.int16))
